/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_I2C_H
#define _MOCK_I2C_H

#include "unity.h"
#include "i2c.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_i2c_Init(void);
void mock_i2c_Destroy(void);
void mock_i2c_Verify(void);




#define i2cInit_IgnoreAndReturn(cmock_retval) i2cInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2cInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define i2cInit_StopIgnore() i2cInit_CMockStopIgnore()
void i2cInit_CMockStopIgnore(void);
#define i2cInit_ExpectAndReturn(i2cNumber, clockRateHz, cmock_retval) i2cInit_CMockExpectAndReturn(__LINE__, i2cNumber, clockRateHz, cmock_retval)
void i2cInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t i2cNumber, uint32_t clockRateHz, _Bool cmock_to_return);
typedef _Bool (* CMOCK_i2cInit_CALLBACK)(uint8_t i2cNumber, uint32_t clockRateHz, int cmock_num_calls);
void i2cInit_AddCallback(CMOCK_i2cInit_CALLBACK Callback);
void i2cInit_Stub(CMOCK_i2cInit_CALLBACK Callback);
#define i2cInit_StubWithCallback i2cInit_Stub
#define i2cRead_IgnoreAndReturn(cmock_retval) i2cRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2cRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define i2cRead_StopIgnore() i2cRead_CMockStopIgnore()
void i2cRead_CMockStopIgnore(void);
#define i2cRead_ExpectAndReturn(i2cNumber, i2cSlaveAddress, receiveDataBuffer, receiveDataBufferSize, sendReadStop, cmock_retval) i2cRead_CMockExpectAndReturn(__LINE__, i2cNumber, i2cSlaveAddress, receiveDataBuffer, receiveDataBufferSize, sendReadStop, cmock_retval)
void i2cRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t i2cNumber, uint8_t i2cSlaveAddress, uint8_t receiveDataBuffer, uint16_t receiveDataBufferSize, _Bool sendReadStop, _Bool cmock_to_return);
typedef _Bool (* CMOCK_i2cRead_CALLBACK)(uint8_t i2cNumber, uint8_t i2cSlaveAddress, uint8_t receiveDataBuffer, uint16_t receiveDataBufferSize, _Bool sendReadStop, int cmock_num_calls);
void i2cRead_AddCallback(CMOCK_i2cRead_CALLBACK Callback);
void i2cRead_Stub(CMOCK_i2cRead_CALLBACK Callback);
#define i2cRead_StubWithCallback i2cRead_Stub
#define i2cWrite_IgnoreAndReturn(cmock_retval) i2cWrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void i2cWrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, _Bool cmock_to_return);
#define i2cWrite_StopIgnore() i2cWrite_CMockStopIgnore()
void i2cWrite_CMockStopIgnore(void);
#define i2cWrite_ExpectAndReturn(i2cNumber, i2cSlaveAddress, transmitDataBuffer, transmitDataBufferSize, sendWriteStop, cmock_retval) i2cWrite_CMockExpectAndReturn(__LINE__, i2cNumber, i2cSlaveAddress, transmitDataBuffer, transmitDataBufferSize, sendWriteStop, cmock_retval)
void i2cWrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t i2cNumber, uint8_t i2cSlaveAddress, uint8_t transmitDataBuffer, uint16_t transmitDataBufferSize, _Bool sendWriteStop, _Bool cmock_to_return);
typedef _Bool (* CMOCK_i2cWrite_CALLBACK)(uint8_t i2cNumber, uint8_t i2cSlaveAddress, uint8_t transmitDataBuffer, uint16_t transmitDataBufferSize, _Bool sendWriteStop, int cmock_num_calls);
void i2cWrite_AddCallback(CMOCK_i2cWrite_CALLBACK Callback);
void i2cWrite_Stub(CMOCK_i2cWrite_CALLBACK Callback);
#define i2cWrite_StubWithCallback i2cWrite_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
